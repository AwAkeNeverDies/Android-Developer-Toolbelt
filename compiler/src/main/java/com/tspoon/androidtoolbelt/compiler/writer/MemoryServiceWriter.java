package com.tspoon.androidtoolbelt.compiler.writer;

import android.app.IntentService;
import android.content.Intent;
import android.os.IBinder;
import android.os.Messenger;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Random;

import javax.lang.model.element.Modifier;

import timber.log.Timber;

public class MemoryServiceWriter implements SourceWriter {

    private int mNumber;

    private static final ClassName CLASS_MEMORY_UTILS = ClassName.get("com.tspoon.androidtoolbelt.utils", "MemoryUtils");

    public MemoryServiceWriter(int number) {
        mNumber = number;
    }

    public String getFileName() {
        return PACKAGE + "." + getSimpleName();
    }

    @Override
    public void writeSource(Writer writer) throws IOException {

        TypeSpec typeSpec = TypeSpec.classBuilder(getSimpleName())
                .superclass(ClassName.get(IntentService.class))
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addField(createFieldMessenger())
                .addField(createFieldAllocations())
                .addField(createFieldRun())
                .addMethod(createConstructor())
                .addMethod(createOnBind())
                .addMethod(createOnHandleIntent())
                .build();

        JavaFile javaFile = JavaFile.builder(PACKAGE, typeSpec)
                .addFileComment("Generated by MemoryServiceWriter.java. Do not modify!")
                .build();

        javaFile.writeTo(writer);
    }

    private String getSimpleName() {
        return "MemoryService" + mNumber;
    }

    private FieldSpec createFieldMessenger() {
        return FieldSpec.builder(ClassName.get(Messenger.class), "mMessenger", Modifier.PRIVATE, Modifier.FINAL).build();
    }

    private FieldSpec createFieldAllocations() {
        return FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(ArrayList.class), ClassName.bestGuess("com.tspoon.androidtoolbelt.utils.ByteArrayWrapper")), "mAllocations", Modifier.PRIVATE, Modifier.FINAL)
                .initializer("new $T<>()", ArrayList.class)
                .build();
    }

    private FieldSpec createFieldRun() {
        return FieldSpec.builder(Boolean.class, "mRun", Modifier.PRIVATE)
                .build();
    }

    private MethodSpec createConstructor() {
        CodeBlock code = CodeBlock.builder()
                .addStatement("super($L.class.getName())", getFileName())
                .addStatement("mMessenger = new $T(new $T(mRun))", Messenger.class, ClassName.bestGuess("com.tspoon.androidtoolbelt.component.service.MessageHandler"))
                .build();

        return MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addCode(code)
                .build();
    }

    private MethodSpec createOnBind() {
        CodeBlock code = CodeBlock.builder()
                .addStatement("$T.d(\"onBind: \" + intent)", Timber.class)
                .addStatement("return mMessenger.getBinder()")
                .build();

        return MethodSpec.methodBuilder("onBind")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ClassName.get(Intent.class), "intent")
                .returns(ClassName.get(IBinder.class))
                .addCode(code)
                .build();
    }


    private MethodSpec createOnHandleIntent() {
        CodeBlock code = CodeBlock.builder()
                .addStatement("mRun = true")

                .addStatement("// This is to prevent all services trying to allocate at once.  Spread them out evenly")
                .beginControlFlow("try")
                .addStatement("$T.sleep(" + (mNumber * 50) + ")", Thread.class)
                .endControlFlow()
                .beginControlFlow("catch ($T e)", InterruptedException.class)
                .endControlFlow()

                .beginControlFlow("while(mRun)")

                .addStatement("mRun = $L.isMemoryAvailable()", CLASS_MEMORY_UTILS)
                .addStatement("$T.d(\"Attempting Allocation...\")", Timber.class)

                .beginControlFlow("if(!$T.get(getApplicationContext()).isLowMemory())", CLASS_MEMORY_UTILS)
                .addStatement("byte[] bytes = new byte[1024 * 1024 * 2]")
                .addStatement("new $T().nextBytes(bytes)", Random.class)
                .addStatement("mAllocations.add(new ByteArrayWrapper(bytes))")
                .addStatement("$T.d(\"Allocated new block\")", Timber.class)

                .beginControlFlow("try")
                .addStatement("$T.sleep(1000)", Thread.class)
                .endControlFlow()
                .beginControlFlow("catch ($T e)", InterruptedException.class)
                .addStatement("e.printStackTrace()")
                .endControlFlow()

                .endControlFlow()
                .endControlFlow()
                .build();


        return MethodSpec.methodBuilder("onHandleIntent")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PROTECTED)
                .addParameter(ClassName.get(Intent.class), "intent")
                .returns(TypeName.VOID)
                .addCode(code.toString())
                .build();
    }
}
